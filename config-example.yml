# Configures the GitLab server, used by playbooks/launch-gitlab.yml
gitlab:

  # The version to install (use gitlab-ee for the enterprise version)
  package: gitlab-ce

  # The name of the server to launch.
  name: gitlab

  # The fully qualified server name. This will be used for Let's Encrypt. If
  # 'auto' is used, a cust.cloudscale.ch entry is used instead. Should you use
  # your own DNS entry, be sure to point it to the right IP after the server
  # has been launched. The playbook will pause for this.
  fqdn: auto

  # Wheter to use Let's Encrypt
  lets_encrypt_enabled: true

  # The email address for Let's Encrypt requests
  lets_encrypt_contact: ''

  # The image used for the GitLab server, note that this repository assumes
  # this to be Debian, Ubuntu, RHEL, or CentOS. Though adding support for
  # another distribution should be easy.
  image: ubuntu-24.04

  # GitLab requires 4GB of RAM and recommends 4 CPU cores. We use 8GB of RAM,
  # since we intend to run a single GitLab Runner on the same host.
  flavor: flex-8-4

  # Can be either lpg1, or rma1.
  zone: lpg1

  # Depending on your needs, you may want to increase this.
  volume_size_gb: 25

  # At least one public SSH key, to access the server.
  ssh_keys: []

  # Cloud-init, to ensure that the server gets all the latest patches, after
  # it has been launched. Note that further package upgrade policies are
  # your responsibility.
  user_data: |
    #cloud-config
    package_upgrade: true

# GitLab runner instances settings
gitlab_runner:

  # Unique name for this group of managed runner instances
  group: fleeting

  # The image to use as a base for the instances
  image: ubuntu-24.04

  # The flavor to use for the instances
  flavor: flex-8-4

  # The zone in which to launch instances
  zone: lpg1

  # The size of the root disk
  volume_size_gb: 25

  # The user data applied to each instance. Note that GitLab expects to find
  # a working docker configuration.
  user_data: |
    #cloud-config
    package_upgrade: true

    apt:
      sources:
        docker.list:
          source: deb https://download.docker.com/linux/ubuntu $RELEASE stable
          keyid: 9DC858229FC7DD38854AE2D88D81803C0EBFCD88

    packages:
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - docker-buildx-plugin

    system_info:
      default_user:
        groups: [docker]

  # Upper limit of instances
  max_instances: 10

  # How many jobs a single instance will process in parallel
  capacity_per_instance: 4

  # The number of jobs an instance completes, before it is removed
  max_builds: 1024

  # Delete instances when the controlling gitlab runner is shut down. This
  # ensures that a new fleeting plugin release causes new runners to be
  # created, but can introduce some instance churn.
  #
  # Note that this is currently not supported due to the following bug in
  # GitLab runner:
  #
  # https://gitlab.com/gitlab-org/gitlab-runner/-/issues/37642
  delete_instances_on_shutdown: false

  # The autoscale policies, as documented by GitLab:
  # https://docs.gitlab.com/runner/configuration/advanced-configuration/#the-runnersautoscalerpolicy-sections
  policies:

    - name: Default Policy

      # Unix cron formatted times during which this policy is active
      period: ["* * * * *"]

      # Target idle capacity we want to be immediately available for jobs
      idle_count: 1

      # Amount of time an instance can be idle before it is terminated
      idle_time: "60s"

  # You can optionally use S3 for CI caches. This allows you to use the 'cache'
  # key in your .gitlab-ci.yml, and have that cache shared across runners.
  #
  # To get started, use `true` below, then create an object user and a bucket
  # on https://control.cloudscale.ch. The bucket has to exist, and you need
  # to use the endpoint where the bucket was created, for this to work.
  s3_cache: false

  # Set to rma/lpg depending on where you created your bucket
  s3_endpoint: objects.lpg.cloudscale.ch

  # The credentials shown in your control panel
  s3_access_key: ''
  s3_secret_key: ''

  # The name of the bucket you created (must exist already).
  s3_bucket: ''
